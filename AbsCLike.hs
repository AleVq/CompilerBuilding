

module AbsCLike where

-- Haskell module generated by the BNF converted

newtype Ident = Ident String 
  deriving (Eq, Ord, Show)

data Type
    = T_Int
    | T_Float
    | T_Char
    | T_Void 
    | Boolean 
    | ArrDef Type Integer
    | Pointer Type
  deriving (Eq, Ord, Show)

data Boolean = Boolean_True | Boolean_False
  deriving (Eq, Ord, Show)

data Program = Prog [Decl]
  deriving (Eq, Ord, Show)

data Decl
    = Dvar Type [VarDeclInit]
    {- dichiarata, ma non inizializzata -}
    | UndVar Type [Ident]
    | Dfun Type Ident [Parameter] [StmtDecl]
    {- le funzioni possono ritornare anche tipi complessi-}
  deriving (Eq, Ord, Show)

data StmtDecl = Decls Decl | Stmts Stmt 
  deriving (Eq, Ord, Show)

data Stmt
    = ProcCall FunCall
    | BlockDecl [StmtDecl]
    | Jmp JumpStmt
    | Iter IterStmt
    | Sel SelectionStmt
    | Assgn LExpr Assignment_op RExpr
    | LExprStmt LExpr
    | Comment String
  deriving (Eq, Ord, Show )

data RExpr
    = InfixOp InfixOp RExpr RExpr
    | UnaryOp UnaryOp RExpr
    | Ref LExpr
    | FCall Ident [RExpr]
    | Lexpr LExpr
    | Int Integer
    | Char Char
    | Double Double
    | Bool Boolean
  deriving (Eq, Ord, Show )

data InfixOp = ArithOp ArithOp | RelOp RelOp | BoolOp BoolOp
  deriving (Eq,Ord,Show)

data ArithOp = Add | Sub | Mul | Div | Mod | Pow
  deriving (Eq,Ord,Show)

data BoolOp = And | Or | Xor 
  deriving (Eq,Ord,Show)

data RelOp = Eq | Neq | Lt | LtE | Gt | GtE
  deriving (Eq,Ord,Show)

data UnaryOp = Not | Neg
  deriving (Eq,Ord,Show)

data FunCall = Call Ident [RExpr]
  deriving (Eq, Ord, Show )

data LExpr
    = Deref RExpr
    | PrePostIncDecr PrePost IncDecr LExpr 
    | BasLExpr BLExpr
  deriving (Eq, Ord, Show )

data PrePost = Post | Pre
  deriving (Eq,Ord,Show)

data IncDecr = Inc | Decr
  deriving (Eq,Ord,Show)

data BLExpr = ArrayEl BLExpr RExpr | Id Ident
  deriving (Eq, Ord, Show )

data VarDeclInit = VarDeclIn Ident ComplexRExpr
  deriving (Eq, Ord, Show )

data ComplexRExpr = Simple RExpr | Array [ComplexRExpr]
  deriving (Eq, Ord, Show )

data Parameter = Param Modality Type Ident
  deriving (Eq, Ord, Show )

data Modality
    = M_Void
    | M_Val
    | M_Ref
    | M_Const
    | M_Res
    | M_Valres
    | M_Name
  deriving (Eq, Ord, Show )

data Assignment_op
    = Assign
    | AssgnMul
    | AssgnAdd
    | AssgnDiv
    | AssgnSub
    | AssgnPow
    | AssgnAnd
    | AssgnOr
  deriving (Eq, Ord, Show )

data JumpStmt = Break | Continue | RetExpVoid | RetExp RExpr
  deriving (Eq, Ord, Show )

data SelectionStmt
    = IfNoElse RExpr [StmtDecl] | IfElse RExpr [StmtDecl] [StmtDecl]
  deriving (Eq, Ord, Show )

data IterStmt
    = While RExpr [StmtDecl]
    | DoWhile [StmtDecl] RExpr
    | For Stmt RExpr Stmt [StmtDecl]
  deriving (Eq, Ord, Show )

