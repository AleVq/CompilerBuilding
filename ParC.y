-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParC where
import AbsC qualified AbsC
import LexC
import ErrM

}

%name pProgram Program
%name pDecl Decl
%name pRExpr RExpr
%name pLExpr LExpr
%name pStmt Stmt

%monad { Err } { thenM } { returnM }
%tokentype {Token}

%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '&=' { PT _ (TS _ 6) }
  '(' { PT _ (TS _ 7) }
  ')' { PT _ (TS _ 8) }
  '*' { PT _ (TS _ 9) }
  '*=' { PT _ (TS _ 10) }
  '+' { PT _ (TS _ 11) }
  '++' { PT _ (TS _ 12) }
  '+=' { PT _ (TS _ 13) }
  ',' { PT _ (TS _ 14) }
  '-' { PT _ (TS _ 15) }
  '--' { PT _ (TS _ 16) }
  '-=' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  '/=' { PT _ (TS _ 19) }
  ';' { PT _ (TS _ 20) }
  '<' { PT _ (TS _ 21) }
  '<=' { PT _ (TS _ 22) }
  '=' { PT _ (TS _ 23) }
  '==' { PT _ (TS _ 24) }
  '>' { PT _ (TS _ 25) }
  '>=' { PT _ (TS _ 26) }
  'False' { PT _ (TS _ 27) }
  'True' { PT _ (TS _ 28) }
  '[' { PT _ (TS _ 29) }
  ']' { PT _ (TS _ 30) }
  '^' { PT _ (TS _ 31) }
  '^=' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'break' { PT _ (TS _ 34) }
  'char' { PT _ (TS _ 35) }
  'const' { PT _ (TS _ 36) }
  'continue' { PT _ (TS _ 37) }
  'do' { PT _ (TS _ 38) }
  'else' { PT _ (TS _ 39) }
  'float' { PT _ (TS _ 40) }
  'for' { PT _ (TS _ 41) }
  'if' { PT _ (TS _ 42) }
  'int' { PT _ (TS _ 43) }
  'name' { PT _ (TS _ 44) }
  'ref' { PT _ (TS _ 45) }
  'res' { PT _ (TS _ 46) }
  'return' { PT _ (TS _ 47) }
  'val' { PT _ (TS _ 48) }
  'valres' { PT _ (TS _ 49) }
  'void' { PT _ (TS _ 50) }
  'while' { PT _ (TS _ 51) }
  '{' { PT _ (TS _ 52) }
  '|=' { PT _ (TS _ 53) }
  '||' { PT _ (TS _ 54) }
  '}' { PT _ (TS _ 55) }
  'double' { PT _ (TS _ 56)}
  '//' { PT _ (TS _ 57)}

L_integ  { PT _ (TI $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_doubl  { PT _ (TD $$) }
L_ident  { PT _ (TV $$) }
L_err    {_}

%left '||'
%left '&&'
%left '!'
%nonassoc '==' '!=' '<' '<=' '>' '>='
%left '+' '-'
%left '*' '/' '%'
%right '^'
%left NEG
%nonassoc NO_ELSE
%nonassoc else

%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Ident   :: { Ident }   : L_ident  { Ident $1 }

Boolean :: { Boolean }
Boolean : 'True' { AbsC.Boolean_True }
| 'False' { AbsC.Boolean_False }


RExpr :: { RExpr }
:  '(' RExpr ')'   { $2 }
| RExpr '||' RExpr { InfixOp (BoolOp Or ) $1 $3 }
| RExpr '&&' RExpr { InfixOp (BoolOp And) $1 $3 }
| RExpr '==' RExpr { InfixOp (RelOp Eq ) $1 $3 }
| RExpr '!=' RExpr { InfixOp (RelOp Neq) $1 $3 }
| RExpr '<'  RExpr { InfixOp (RelOp Lt ) $1 $3 }
| RExpr '<=' RExpr { InfixOp (RelOp LtE) $1 $3 }
| RExpr '>'  RExpr { InfixOp (RelOp Gt ) $1 $3 }
| RExpr '>=' RExpr { InfixOp (RelOp GtE) $1 $3 }
| RExpr '+'  RExpr { InfixOp (ArithOp Add) $1 $3 }
| RExpr '-'  RExpr { InfixOp (ArithOp Sub) $1 $3 }
| RExpr '*'  RExpr { InfixOp (ArithOp Mul) $1 $3 }
| RExpr '/'  RExpr { InfixOp (ArithOp Div) $1 $3 }
| RExpr '%'  RExpr { InfixOp (ArithOp Mod) $1 $3 }
| RExpr '^'  RExpr { InfixOp (ArithOp Pow) $1 $3 }
| '!' RExpr        { UnaryOp Not $2 }
| '-' RExpr %prec NEG { UnaryOp Neg $2 }
| LExpr            { LExpr $1 }
| Ident '(' ListRExpr ')' { FCall $1 $3 }
| Integer          { Const $ Int $1 }
| Char             { Const $ Char $1 }
| Ident           { Const $ Ident $1 }
| Boolean            { Const $ Bool }

ListRExpr :: { [RExpr] }
ListRExpr : {- empty -} { [] }
          | RExpr { (:[]) $1 }
          | RExpr ',' ListRExpr { (:) $1 $3 }
          
LExpr :: { LExpr }
LExpr : LExpr1 { $1 }
      | Ident { AbsC.Id $1 }
      | '*' RExpr { AbsC.Deref $2 }
      | '++' LExpr1 { PrePostIncDecr Pre Inc $2 }
      | '--' LExpr1 { PrePostIncDecr Pre Decr $2 }
      
LExpr1 :: { LExpr }
      : LExpr2      { $1 }
      | LExpr2 '++' { PrePostIncDecr Post Inc $1 }
      | LExpr2 '--' { PrePostIncDecr Post Decr $1 }

LExpr2 :: { LExpr }
LExpr2 : '(' LExpr ')' { $2 } | LExpr '[' RExpr ']' { AbsC.BasLExpr $1 $3 }

Program :: { Program }
Program : ListDecl { AbsC.Prog  $1 }

ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } | ListDecl Decl { flip (:) $1 $2 }

Decl :: { Decl }
Decl : Type ListVarDec ';' { AbsC.Dvar $1 $2 }
     | Type Ident '(' ListParameter ')' List_Stmt_Decl { AbsC.Dfun $1 $2 $4 $6 }
     
ListVarDec :: { [VarDeclar] }
ListVarDec : VarDeclar { (:[]) $1 }
                | VarDeclar ',' ListVarDec { (:) $1 $3 }
                
Type :: { Type }
Type : Type '[' Integer ']' { AbsC.ArrDef $1 $3 }
     | Type '*' { AbsC.Pointer $1 }
     | 'bool' {AbsC.Boolean}
     | 'int'  {AbsC.T_Int}
     | 'double' {AbsC.T_Float}
     | 'char'   {AbsC.T_Char}
     | 'void'   {AbsC.T_Void}

VarDeclar :: { VarDeclar }
VarDeclar : Ident '=' ComplexRExpr { AbsC.VarDecl $1 $3 }

ComplexRExpr :: { ComplexRExpr }
ComplexRExpr : RExpr { AbsC.Simple $1 }
             | '[' ListComplexRExpr ']' { AbsC.Array $2 }
             
ListComplexRExpr :: { [ComplexRExpr] }
ListComplexRExpr : ComplexRExpr { (:[]) $1 }
                 | ComplexRExpr ',' ListComplexRExpr { (:) $1 $3 }
                 
ListParameter :: { [Parameter] }
ListParameter : {- empty -} { [] }
              | Parameter { (:[]) $1 }
              | Parameter ',' ListParameter { (:) $1 $3 }
              
Parameter :: { Parameter }
Parameter : Modality Type Ident { AbsC.Param $1 $2 $3 }

Modality :: { Modality }
Modality : {- empty -} { AbsC.M_Void }
         | 'val' { AbsC.M_Val }
         | 'ref' { AbsC.M_Ref }
         | 'const' { AbsC.M_Const }
         | 'res' { AbsC.M_Res }
         | 'valres' { AbsC.M_Valres }
         | 'name' { AbsC.M_Name }
         
Stmt :: { Stmt }
Stmt : '{' List_Stmt_Decl '}' {AbsC.Block $2}
     | 'break' {AbsC.Break}
     | 'continue' {AbsC.Continue}
     | 'return' '(' RExpr ')' ';' {AbsC.RetExp $3}
     | 'return' ';' {AbsC.RetExpVoid}
     | LExpr Assignment_op RExpr ';' { AbsC.Assgn $1 $2 $3 }
     | LExpr ';' { AbsC.LExprStmt $1 }
     | 'if' '(' RExpr ')' Stmt %prec NO_ELSE {AbsC.IfNoElse $3 $5}
     | 'if' '(' RExpr ')' Stmt 'else' Stmt {AbsC.IfElse $3 $5 $7}
     | 'while' '(' RExpr ')' Stmt {AbsC.While $3 $5}
     | 'do' Stmt 'while' '(' RExpr ')' ';' {AbsC.DoWhile $2 $5}
     | 'for' '(' Stmt ';' RExpr ';' Stmt ')' Stmt {AbsC.For $3 $5 $7 $9}
     | '//' Ident {AbsC.Comment $2}
     
Assignment_op :: { Assignment_op }
Assignment_op : '=' { AbsC.Assign }
              | '*=' { AbsC.AssgnMul }
              | '+=' { AbsC.AssgnAdd }
              | '/=' { AbsC.AssgnDiv }
              | '-=' { AbsC.AssgnSub }
              | '^=' { AbsC.AssgnPow }
              | '&=' { AbsC.AssgnAnd }
              | '|=' { AbsC.AssgnOr }

List_Stmt_Decl :: { List_Stmt_Decl }
List_Stmt_Decl : {- empty -} { [] }
               | Decl {(:[]) $1}
               | Stmt {(:[]) $1}
               | Stmt ';' List_Stmt_Decl { (:) $1 $2}
               | Decl ';' List_Stmt_Decl { (:) $1 $2}
              
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

